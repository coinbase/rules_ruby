package(default_visibility = ["//:__subpackages__"])

load(
    "@coinbase_rules_ruby//ruby:defs.bzl",
    "rb_binary",
    "rb_library",
    "rb_rspec",
    "rb_test",
)

filegroup(
    name = "sources",
    srcs = glob([
        "script.rb",
        "lib/*.rb",
    ]),
)

filegroup(
    name = "spec_sources",
    srcs = glob([
        "spec/**/*.rb",
    ]),
)

rb_library(
    name = "lib",
    srcs = [
        ":sources",
        ":spec_sources",
    ],
    deps = [
        "@bundle//:awesome_print",
        "@bundle//:colored2",
    ],
)

rb_binary(
    name = "bin",
    srcs = ["script.rb"],
    main = "script.rb",
    deps = [
        ":lib",
        "//lib:foo",
        "@bundle//:awesome_print",
        "@bundle//:colored2",
    ],
)

rb_binary(
    name = "bin-all",
    srcs = ["script.rb"],
    main = "script.rb",
    deps = [
        ":lib",
        "//lib:foo",
        "@bundle//:gems",
    ],
)

# This is an example of the RSpec definition that uses autorun
# and points to spec_helper as the main spec file. It specifies
# which specs to run using the args.
rb_test(
    name = "rspec-autorun",
    timeout = "short",
    srcs = [
        ":sources",
        ":spec_sources",
    ],
    args = [
        "--format documentation",
        "--force-color",
    ] + glob([
        "spec/**/*.rb",
    ]),
    main = "spec/spec_helper.rb",
    rubyopt = ["-rrspec/autorun"],
    deps = [
        "@bundle//:awesome_print",
        "@bundle//:colored2",
        "@bundle//:rspec",
        "@bundle//:rspec-its",
    ],
)

# This is a similar example, except instead of using rubyopt to load
# rspec, we execute rspec executable located in the bin folder under
# the bundle, accessible via @bundle//:bin/rspec
rb_test(
    name = "rspec-binary",
    timeout = "short",
    srcs = [
        ":sources",
        ":spec_sources",
        "@bundle//:bin/rspec",
    ],
    args = [
        "--format documentation",
        "--force-color",
        "spec",
    ],
    main = "@bundle//:bin/rspec",
    deps = [
        "@bundle//:awesome_print",
        "@bundle//:colored2",
        "@bundle//:rspec",
        "@bundle//:rspec-its",
    ],
)

# Finally, this is the short version of the same thing, expressed
# via the rb_rspec_test rule that does what the above example
# shows but encapsulated in the rule itself. It adds rspec and rspec-its
# gems to the dependency list, executes bin/rspec and passes spec_targets
# as arguments to rspec.
rb_rspec(
    name = "ruby-rspec-test",
    srcs = [
        ":sources",
        ":spec_sources",
    ],
    rspec_args = {
        # NOTE: the output is only visible with --test_output=streamed flag
        "--format": "progress",  # this is how we can override rspec output format
    },
    specs = glob([
        "spec/**/*.rb",
    ]),
    deps = [
        "@bundle//:awesome_print",
        "@bundle//:colored2",
    ],
)

rb_binary(
    name = "rubocop",
    srcs = [
        ".relaxed-rubocop-2.4.yml",
        ".rubocop.yml",
        "@bundle//:bin/rubocop",
    ],
    args = [
        "-c",
        ".rubocop.yml",
        "-P",
        "-D",
    ],
    main = "@bundle//:bin/rubocop",
    deps = [
        ":lib",
        "//lib:foo",
        "@bundle//:rubocop",
    ],
)
